import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const urlReplacementPlugin = {
	name: 'url-shim',
	setup(build) {
		build.onResolve({ filter: /^url$/ }, args => ({
			// Redirect 'url' module imports to a custom file
			path: args.path, namespace: 'shim'
		}));

		// Handle the virtual module content
		build.onLoad({ filter: /^url$/, namespace: 'shim' }, args => {
			return {
				contents: `
                    export function parse() { 
                        throw new Error('Node.js url.parse() was called - this module has been removed to allow mobile compatibility'); 
                    }
                    export function format() { 
                        throw new Error('Node.js url.format() was called - this module has been removed to allow mobile compatibility'); 
                    }
                    export function resolve() { 
                        throw new Error('Node.js url.resolve() was called - this module has been removed to allow mobile compatibility'); 
                    }
                `,
				loader: 'js'
			};
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2020",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	plugins: [urlReplacementPlugin],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
